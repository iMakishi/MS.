Job interviews often begin with a few "Why" questions from the interviewer, such as "Why do you want this job?" or "Why should we choose you for the role?" Here are some tips on how to answer these types of questions:

Why Pleo?
When responding to this question, it is important to have done thorough research on the company beforehand. Mention what specifically drew you to Pleo, whether it's their mission, product, company culture, or something else that resonates with you. You can also share any personal experiences you may have had with Pleo, such as using their expense management tool in a previous job.

Example Answer: "I have been a fan of Pleo ever since I began using it for expense management at my previous job. Your company's commitment to making work easier and more enjoyable for employees really resonated with me. I was thrilled to learn about an opportunity to join the team and contribute to that mission."


Why this job?
Your answer to this question should focus on what skills and experiences you have that make you a good fit for the role. It's helpful to highlight specific responsibilities mentioned in the job description and how your previous experience has prepared you for those responsibilities. Additionally, be sure to explain why the role aligns with your career goals.

Example Answer: "I believe my experience in project management and leadership make me a strong fit for this role as a Product Manager. Specifically, my success managing cross-functional teams and launching multiple products prove my ability to take ownership of complex projects from ideation to launch. As someone who is passionate about technology and innovation, joining a company like Pleo would allow me to grow and expand my skill set in a dynamic industry."


Why you?
This is your chance to showcase what sets you apart from other candidates. Highlight your strongest qualities, providing examples of how you've demonstrated them in your previous work experience. Emphasize both hard and soft skills that would be valuable in the role, such as problem-solving abilities and communication skills.

Example Answer: "I believe my experience developing software applications in Python combined with my strong analytical skills would make me a great addition to the development team. I pride myself on being curious and adaptable, which has allowed me to take on new tasks and learn quickly. Additionally, my dedication to producing clean, efficient code would ensure that our software always runs smoothly for customers."





'------------------------- STANDARD LIBRARY IMPORTS -------------------------'

from tkinter import *

'------------------------- LOCAL IMPORTS -------------------------'

from gui import Window

'------------------------- LOGIC -------------------------'

def main():
    root = Tk()
    app = Window(root)
    root.mainloop()

if __name__ == '__main__':
    main()


'------------------------- STANDARD LIBRARY IMPORTS -------------------------'

from tkinter import *

'------------------------- LOCAL IMPORTS -------------------------'

from functions import close
from functions import randomize

from functions import Folder

'------------------------- LOGIC -------------------------'

class Window:
    def __init__(self, master):
        self.master = master

        '--------------------------------------------------'

        # Window bar
        master.title('MOVIÆŽ RAN|SEL')
        master.resizable(0, 0)

        # Window size and position
        window_width = 925 # Width for the Tk window.
        window_height = 310 # Height for the Tk window.

        screen_width = master.winfo_screenwidth() # Width of the screen.
        screen_height = master.winfo_screenheight() # Height of the screen.

        # X and Y coordinates for the Tk window.
        x = (screen_width/2) - (window_width/2)
        y = (screen_height/2) - (window_height/2)

        # Dimensions of the screen and where it is placed.
        master.geometry('%dx%d+%d+%d' % (window_width, window_height, x, y))

        # Window background color
        master.configure(bg = 'white')

        '--------------------------------------------------'

        # Menubar
        menubar = Menu(master,
                       bg = 'white',
                       activebackground = 'white',
                       relief = FLAT,
                       borderwidth = 0)

        master.config(menu = menubar)

        '--------------------------------------------------'

        # File Section (Menubar)
        filemenu = Menu(menubar,
                        tearoff = 0,
                        relief = FLAT)

        menubar.add_cascade(label = "File",
                            menu = filemenu)

        # # Select Folder (File Section (Menubar))
        filemenu.add_command(label = "Select Folder...  ",
                             command = lambda: Folder.select(self))

        # # Preferences (File Section (Menubar))
        preferences_submenu = Menu(filemenu,
                                   tearoff = 0,
                                   relief = FLAT)

        filemenu.add_cascade(label = "Preferences",
                             menu = preferences_submenu)

        # # # Filter (Preferences (File Section (Menubar)))
        preferences_submenu.add_command(label = "Filters",
                                        command = None)

        # # Quit (File Section (Menubar))
        filemenu.add_separator()
        filemenu.add_command(label = "Quit",
                             command = lambda: close(master))

        '--------------------------------------------------'

        # Help Section (Menubar)
        helpmenu = Menu(menubar,
                        tearoff = 0)

        menubar.add_cascade(label = "Help",
                            menu = helpmenu)

        # # Release Notes (Help Section (Menubar))
        helpmenu.add_command(label = "Release Notes",
                             command = None)

        # # Report Problem (Help Section (Menubar))
        helpmenu.add_command(label = "Report a problem",
                             command = None)

        # # About (Help Section (Menubar))
        helpmenu.add_separator()
        helpmenu.add_command(label = "About",
                             command = None)

        '--------------------------------------------------'

        # Main Window Frame Sections Content

        '------------------------- Top Frame Section -------------------------'
        TopFrame = Frame(master,
                         bg = 'white')

        TopFrame.pack(ipadx = window_width)

        internalTopFrame = Frame(TopFrame,
                                 bg = 'white')

        internalTopFrame.pack(side = TOP,
                              ipadx = window_width)

        # Filters Button (Superior Top Frame Section)
        filtersButton = Button(internalTopFrame,
                               text = "Filters",
                               font = ('Overpass', 12, 'bold'),
                               bg = 'white',
                               activebackground = 'white',
                               relief = FLAT,
                               borderwidth = 0,
                               highlightthickness = 0,
                               command = None)

        filtersButton.pack(side = TOP,
                           anchor = NE,
                           padx = 10)

        # App Title (Inferior Top Frame Section)
        appTitle = Label(internalTopFrame,
                         text = " MOVIE RANSEL ",
                         font = ('Overpass', 24, 'italic bold underline'),
                         bg = 'white')

        appTitle.pack(side = BOTTOM)

        # Result Label
        self.resultLabel = Label(TopFrame,
                            text = ". . .",
                            font = ('Overpass', 14, 'bold'),
                            bg = 'white',)

        self.resultLabel.pack(side = BOTTOM,
                         padx = 10,
                         pady = 5,
                         ipadx = window_width,)

        '------------------------- Middle Frame Section -------------------------'

        MiddleFrame = Frame(master,
                            bg = 'white')

        MiddleFrame.pack(ipadx = window_width)

        # Full Index Button
        indexButton = Button(MiddleFrame,
                             text = "Index",
                             font = ('Overpass', 12, 'bold'),
                             relief = SOLID,
                             bg = 'white',
                             activebackground = 'white',
                             command = None)

        indexButton.pack(side = LEFT,
                         padx = (242, 5),
                         pady = (10, 10))

        indexButton.config(width = 20)

        # Randomize Button
        randomizeButton = Button(MiddleFrame,
                                 text = "Randomize",
                                 font = ('Overpass', 12, 'bold'),
                                 relief = SOLID,
                                 bg = 'white',
                                 activebackground = 'white',
                                 command = lambda: randomize(self))

        randomizeButton.pack(side = RIGHT,
                             padx = (5, 242),
                             pady = (10, 10))

        randomizeButton.config(width = 20)

        '------------------------- Bottom Frame Section -------------------------'

        BottomFrame = Frame(master,
                            bg = 'white')

        BottomFrame.pack(ipadx = window_width)

        # Exit Button
        exitButton = Button(BottomFrame,
                            text = "Exit",
                            font = ('Overpass', 12, 'bold'),
                            relief = SOLID,
                            bg = 'white',
                            activebackground = 'white',
                            command = lambda: close(master))

        exitButton.pack(side = TOP,
                        pady = (10, 10))

        exitButton.config(width = 20)

        # Signature Label
        signatureLabel = Label(BottomFrame,
                               text = "@2022 by iMakishi. (Maximiliano E. Lutz)",
                               font = ('Overpass', 10, 'bold'),
                               bg = 'white')

        signatureLabel.pack(side = BOTTOM,
                            ipady = 5)
        
    def FiltersWindow(self):
        self.FiltersWindow = Toplevel(self.master)

'--------------------------------------------------'

class FiltersWindow:
    pass

'--------------------------------------------------'

class IndexWindow:
    pass

'--------------------------------------------------'

class SettingsWindow:
    pass

'--------------------------------------------------'

class ReleaseNotesWindow:
    pass

'--------------------------------------------------'

class ReportProblemWindow:
    pass

'--------------------------------------------------'

class AboutWindow:
    pass




'------------------------- STANDARD LIBRARY IMPORTS -------------------------'

import os
from tkinter import *
from tkinter import filedialog
import json
import random

'------------------------- LOGIC -------------------------'

def close(x):
    x.destroy()

class Folder:
    path = None
    
    def __init__(self, select, store):
        self.select = select
        self.store = store

    def select(self):
        # Function description
        "Opens windows file explorer and returns the selected directory, replacing the previous global 'path' variable value with new one."
        
        path = filedialog.askdirectory(title = "...")
        Folder.store(self, path)
        return path
        
    def store(self, path):
        #Function description
        "Creates new "
        
        file_name = 'path.txt'
        try:
            with open(file_name, 'w') as file:
                json.dump(path, file)
            self.resultLabel.cofig(text = "Folder directory succesfuly saved!" )
        except:
            self.resultLabel.config(text = "Error while saving folder directory!")










"""
folder_name = None

def selectFolder(self):
    folder_name = filedialog.askdirectory(title = "Select Folder")
    storeFolder(self, folder_name)

def storeFolder(self, folder_name):
    file_name = 'mainFolderPath.json'
    try:
        with open(file_name, 'w') as file_path:
            json.dump(folder_name, file_path)
        self.resultLabel.config(text = "Folder successfuly loaded.")
    except:
        self.resultLabel.config(text = "Error while loading folder.")
"""
result = None

def randomize(self):
    try:
        file_name = 'mainFolderPath.json'
        with open(file_name) as file_path:
            list = os.listdir(json.load(file_path))
            for result in range(1):
                result = cleanTxt(random.choice(list))
                self.resultLabel.config(text = result)
    except FileNotFoundError:
        try:
            list = os.listdir(Folder.path)
            for result in range(1):
                result = cleanTxt(random.choice(list))
                self.resultLabel.config(text = result)
        except FileNotFoundError:
            Folder.select()

def cleanTxt(txt):
    x = txt.split(" [", 1)
    return x[0]
